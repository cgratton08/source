	private static final Logger logger = LoggerFactory.getLogger(BaseController.class);
	
	@Autowired
	private Environment env;
	
	@Autowired
	public MenuService menuSrv;

	@Value("${appMode:OPERATIONAL}")
	AppMode appMode;

	@PostConstruct
	public void init() {
        logger.info("RMTOOLSMS Application started in {} mode", appMode);
    }
	
	
	/**
	 * Return the home page and set the local base on the lang parameter
	 * 
	 * @param model
	 * @return
	 */
	@RequestMapping(value= {"/", "/home"})
    public ModelAndView home(ModelMap model) 
	{
		Locale locale = LocaleContextHolder.getLocale();
		model.put("spinnerMessage", messageSource.getMessage("spinner.message", null, locale));
		
		if (locale.getLanguage().equals(new Locale("fr").getLanguage()))
			model.put(DATA_TABLE_LANG, LANG_FR);
		else
			model.put(DATA_TABLE_LANG, LANG_EN);
		
		session.setAttribute("activeProfile", messageSource.getMessage("home.profile", new Object[]{env.getActiveProfiles()[0]}, LocaleContextHolder.getLocale()));
		
		// Use in header.jsp to display the user full name in welcome page, welcome message			
		session.setAttribute("userName", activeSessionSrv.getActiveUserFullName());
		
		model.put(ENVIRONMENT_TYPE_ITEMS, envTypeSrvRep.findAll(Sort.by(Sort.Order.asc("envName").ignoreCase())));						
				
		logger.debug("Session ID: {}", session.getId());
		Collections.list(session.getAttributeNames()).forEach(name -> logger.debug("{}: {}", name, session.getAttribute(name)));
		
		if (activeSessionSrv.getLoggedUser() == null) {
			logger.error("{}", "Impossible to extract logged user. Redirecting to login page");
			return new ModelAndView(LOGIN, model, HttpStatus.OK);
		}
		else if (menuSrv.isHelpDeskUser(activeSessionSrv.getLoggedUser()))
			return new ModelAndView(HELPDESK_VIEW, model, HttpStatus.OK);			
		else {
			setActiveMenu(WEBSPHERE_ACTIVE, model);
			return new ModelAndView(WEBSPHERE_VIEW, model, HttpStatus.OK);
		}
    }
	
	@RequestMapping(value= {"/helpdeskHome"})
    public ModelAndView helpdeskHome(ModelMap model) {
		
		setLanguageAndMessage(model);
		return new ModelAndView(HELPDESK_VIEW, model, HttpStatus.OK);
	}

	@RequestMapping(value= {"/websphereHome"})
    public ModelAndView websphereHome(ModelMap model) {
		
		setLanguageAndMessage(model);
		model.put(ENVIRONMENT_TYPE_ITEMS, envTypeSrvRep.findAll(Sort.by(Sort.Order.asc("envName").ignoreCase())));						
				
		setActiveMenu(WEBSPHERE_ACTIVE, model);
		return new ModelAndView(WEBSPHERE_VIEW, model, HttpStatus.OK);
	}
	
	@RequestMapping(value= {"/jbossHome"})
    public ModelAndView jbossHome(ModelMap model) {
		
		setLanguageAndMessage(model);
		model.put(ENVIRONMENT_TYPE_ITEMS, envTypeSrvRep.findAll(Sort.by(Sort.Order.asc("envName").ignoreCase())));						
		
		setActiveMenu(JBOSS_ACTIVE, model);
		return new ModelAndView(JBOSS_VIEW, model, HttpStatus.OK);
	}

	@RequestMapping(value= {"/pegaHome"})
    public ModelAndView pegaHome(ModelMap model) {
		
		setLanguageAndMessage(model);
		model.put(ENVIRONMENT_TYPE_ITEMS, envTypeSrvRep.findAll(Sort.by(Sort.Order.asc("envName").ignoreCase())));						
		
		setActiveMenu(PEGA_ACTIVE, model);
		return new ModelAndView(PEGA_VIEW, model, HttpStatus.OK);
	}

	@RequestMapping(value= {"/cmodHome"})
    public ModelAndView cmodHome(ModelMap model) {
		
		setLanguageAndMessage(model);
		model.put(ENVIRONMENT_TYPE_ITEMS, envTypeSrvRep.findAll(Sort.by(Sort.Order.asc("envName").ignoreCase())));						
		
		setActiveMenu(CMOD_ACTIVE, model);
		return new ModelAndView(CMOD_VIEW, model, HttpStatus.OK);
	}

	@RequestMapping(value= {"/customHome"})
    public ModelAndView customHome(ModelMap model) {
		
		setLanguageAndMessage(model);
		model.put(ENVIRONMENT_TYPE_ITEMS, envTypeSrvRep.findAll(Sort.by(Sort.Order.asc("envName").ignoreCase())));						
		
		setActiveMenu(CUSTOM_ACTIVE, model);
		return new ModelAndView(CUSTOM_VIEW, model, HttpStatus.OK);
	}		
	
	@RequestMapping("/login")
    public String login(@ModelAttribute("loginForm") LoginForm loginForm, ModelMap model) 
	{
		// Check the operational mode of the application
		if (appMode != null && appMode == AppMode.MAINTENANCE)
			model.addAttribute("appMode", AppMode.MAINTENANCE);
		else
			model.addAttribute("appMode", AppMode.OPERATIONAL);
			
		session.setAttribute(APP_VERSION, versionHolder.getAppVersion());
		return LOGIN;
    }
	
	/**
	 * In case of a server restart the UI need to refresh the entire page
	 * and not just the [containerData] div.
	 * 
	 * @return true or false
	 */
	@GetMapping("/isLogin")
	public ResponseEntity<Boolean> isLogin() {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		logger.debug("Is user {} authenticated: {}", ((UserDetails)auth.getPrincipal()).getUsername(), auth.isAuthenticated());
		return new ResponseEntity<>(Boolean.valueOf(auth.isAuthenticated()), HttpStatus.OK);
	}
	
	/**
	 * A central point to set and display an error page with informations about the exception
	 * This function will be mostly call from a Javascript function call that return an error.
	 * 
	 * @param model
	 * @return
	 */
	@RequestMapping("/globalError")
    public ModelAndView globalError(@RequestParam Map<String, String> model) {			
		return processError(model);
	}	
