/* ********** common.js ********** 
 *
 *  Regroup JS functions use by all Contexts
 */

/**
 * Set the status if a Deployment
 * 
 * @param form The form
 * @param url  The Rest Service to call
 * @param id   Id of the Entity
 * 
 * @returns Process to set the status of the Deployment in the DB context related table to success / failed
 */
function updateSingleDeploymentStatus(formSubmit, url, id) 
{
	$.when(isAuthenticated()).then
	(
		function(data, textStatus, jqXHR) 
		{
//			blockUI();
			var formData = $(formSubmit).serializeArray();

			var elem = $('#status'+id);
	
			$.post(
			{
				url : url,
				data : formData,
				success : function(data) 
				{
					if (data.errorMessage) {
						var errorElem = document.getElementById('error');
						errorElem.className = 'error';
						errorElem.innerHTML = data.errorMessage;
						return;
					}
					
					elem.text(data.deployment.status);					
				},
				error : function(xhr, text, error) { 
					$(".container").load("/globalError #containerData", JSON.parse(xhr.responseText));
				}
			});
				
//			unblockUI();		
		}
	);
}

/**
 * Set the status of a Queue Deployment
 * 
 * @param form The form
 * @param url  The Rest Service to call
 * @param id   Id of the Entity
 * 
 * @returns Process to set the status of the Deployment in the DB context related table to success / failed
 */
function updateQueueDeploymentStatus(formSubmit, url, id) 
{
	$.when(isAuthenticated()).then
	(
		function(data, textStatus, jqXHR) 
		{
//			blockUI();
			var formData = $(formSubmit).serializeArray();

			var elem = $('#status'+id);
	
			$.post(
			{
				url : url,
				data : formData,
				success : function(data) 
				{
					if (data.errorMessage) {
						var errorElem = document.getElementById('error');
						errorElem.className = 'error';
						errorElem.innerHTML = data.errorMessage;
						return;
					}
					
					elem.text(data.deployment.status);					
				},
				error : function(xhr, text, error) { 
					$(".container").load("/globalError #containerData", JSON.parse(xhr.responseText));
				}
			});
				
//			unblockUI();		
		}
	);
}

// ----------------------------------------------
/**
 * loadValues
 * 
 * Load values related to a selection in a drop box
 * 
 * @param formSubmit
 *            The form
 * @param url
 *            The Rest service to call
 * 
 * @returns The view to the Entities Object that was created
 */
function loadValues(formSubmit, url, orderColumn, freezeUI, userId) 
{
	$.when(isAuthenticated()).then
	(
		function(data, textStatus, jqXHR) 
		{
			var formData = $(formSubmit).serializeArray();
			if (userId != undefined) {
				formData.push({name : 'user', value : userId});
			}

			if (freezeUI == true) {
				blockUI();
			}

			$.post(
			{
				url : url,
				data : formData,
				success : function(data) 
				{
					$(".container").html($('#containerData', data));

					$('table').DataTable({
						"language" : {"url" : dataTableLang},
   						"order" : [ orderColumn, 'asc' ],
						"columnDefs" : [ { targets : 'no-sort', orderable : false } ],

						initComplete: function () 
						{
							// To prevent a "No matching records found" in the fileUploadForm
							if (this.hasClass("filterable")) 
							{
					            // Apply the search
					            this.api().columns().every( function () 
								{
					                var that = this;	

				                	$( 'input', this.header() ).on( 'keyup change clear', function () {
				                    	if ( that.search() !== this.value ) {
				                        	that.search( this.value ).draw();
				                    	}
				                 	});
		
				                	$( 'input', this.header() ).on( 'click thead th input', function (event) {
										event.stopPropagation();
				                 	});
			 
					                $( 'input', this.footer() ).on( 'keyup change clear', function () {
					                    if ( that.search() !== this.value ) {
					                        that.search( this.value ).draw();
					                    }
					                });
					            });
							}
				        },
					});
				},
				error : function(xhr, text, error) {
					$(".container").load("/globalError #containerData", JSON.parse(xhr.responseText));
				}
			});

			$(formSubmit + ':focus').blur();
		}
	);
}

// ----------------------------------------------
function loadRolesToEdit(url, id, freezeUI) 
{
	$.when(isAuthenticated()).then
	(
		function(data, textStatus, jqXHR) 
		{
			var formData = [{name : 'id', value : id}];

			blockUI();

			$.post(
			{
				url : url,
				data : formData,
				success : function(data) {					
					$(".container").html($('#containerData', data));
				},
				error : function(xhr, text, error) {
					$(".container").load("/globalError #containerData", JSON.parse(xhr.responseText));
				}
			});
			
			unblockUI();
		}
	);
}

/**
 * loadRoles
 * 
 * Load the roles of a particular user 
 * 
 * @param formSubmit
 *            The form
 * @param url
 *            The Rest service to call
 * @param id
 *            The select elem origin of the request [userRolesFrom, userRolesTo]
 * @param freezeUI
 *            freeze or not the UI while seraching
 * 
 * @returns The view to the Entities Object that was created
 */
function loadRoles(formSubmit, url, id, freezeUI) 
{
	$.when(isAuthenticated()).then
	(
		function(data, textStatus, jqXHR) 
		{
			var formData = $(formSubmit).serializeArray();
			formData.push({name : 'id', value : id});
			
			if (freezeUI == true) {
				blockUI();
			}

			$.post(
			{
				url : url,
				data : formData,
				success : function(data) 
				{
					// Set button visibility
					$("#btnUserFromDuplicate").prop("disabled", data.userFromUnknown);
					$("#btnUserToReset").prop("disabled", data.userToUnknown);
					$("#btnUserToAssign").prop("disabled", data.userToUnknown);
					$("input:checkbox[name='userRolesTo']").prop("disabled", data.userToUnknown);
					
					// Clear the form roles checkbox
					for (let i = 0; i < document.getElementsByName(id).length; i++) {
						document.getElementsByName(id)[i].checked = false;						
					}

					// Set the roles
					if (data.AssignRolesForm[id] != null)
					{
						for (const userRole of data.AssignRolesForm[id]) {
							$('input:checkbox[name="' + id + '"][value="' + userRole.agroup + '"]').prop('checked',true);	
						}
					}
				},
				error : function(xhr, text, error) {
					$(".container").load("/globalError #containerData", JSON.parse(xhr.responseText));
				}
			});

			unblockUI();
		}
	);
}

function clearAllUserRolesTo() {
	// Clear the form roles checkbox
	for (let i = 0; i < document.getElementsByName("userRolesTo").length; i++) {
		document.getElementsByName("userRolesTo")[i].checked = false;						
	}
}

function clearUserToRoles() {
	loadRoles('#usersUtilitiesForm', '/selectWebsphereUserRoles', 'userRolesTo', true);
}

function duplicateRoles() 
{		
	var selected = [];
	$("input:checkbox[name='userRolesFrom']:checked").each(function () {
    	selected.push($(this).attr("value"));
    });
		
	let id = 'userRolesTo';
	// Clear the form roles checkbox
	for (let i = 0; i < document.getElementsByName('userRolesTo').length; i++) {
		document.getElementsByName(id)[i].checked = false;						
	}

	// Set the roles
	for (const userRole of selected) {
		$('input:checkbox[name="userRolesTo"][value="' + userRole + '"]').prop('checked',true);						
	}
}

function saveUserToRoles(formSubmit)
{
	var formData = $(formSubmit).serializeArray();
	postCommand('/saveWebsphereUserRoles', formData, 1);
}
