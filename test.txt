/* ********** menu.js ********** */

/**
 * sideMenuExtend
 * 
 * Function to display the right side menu
 * Can be use programmatically if a list of menu item is receive separated by colon [:]
 * 
 * @param menuItems	The item top open the menu to
 * @param leaveOpen	If the menu item is open leave it open
 * @return
 */
function sideMenuExtend(menuItems, leaveOpen) 
{
	if(menuItems)
	{
		var items = menuItems.split(":");
		items.forEach(function(menuItem) 
		{
		    var x = document.getElementById(menuItem);
		    if (x != null)
			{		
				if (x.className.indexOf("w3-show") == -1) {
			        x.className += " w3-show";
			        x.previousElementSibling.lastElementChild.className = "fas fa-caret-down";
			    } else if (!leaveOpen) { 
			        x.className = x.className.replace(" w3-show", "");        
			        x.previousElementSibling.lastElementChild.className = "fas fa-caret-right";
			    }
			}
		});
	}
}

/**
 * sideMenuExtend2
 * 
 * Same as above but without the parsing.
 * NOT USED YET
 * 
 * @param menuItem
 * @returns
 */
function sideMenuExtend2(menuItem)
{
    var x = document.getElementById(menuItem);
    if (x.className.indexOf("w3-show") == -1)
 	{
        x.className += " w3-show";
        //x.previousElementSibling.lastElementChild.className = "fa fa-minus-square-o";
        x.previousElementSibling.lastElementChild.className = "fas fa-caret-down";
        var elem = x.previousElementSibling.lastElementChild;
        var cn = elem.className;        
        console.log(elem + " " + cn)
    } else { 
        x.className = x.className.replace(" w3-show", "");        
        //x.previousElementSibling.lastElementChild.className = "fa fa-plus-square-o";
        x.previousElementSibling.lastElementChild.className = "fas fa-caret-right";
    }
}

//Spinner message. Need to i18n
var blockUIMessage = "Processing request, please wait..."
/**
 * setSpinnerMessage
 * 
 * The message displayed when a user is waiting for an action to complete
 * 
 * @param message
 * @returns
 */
function setSpinnerMessage(message) {	
	blockUIMessage = message;
}

/**
 * BlockUI
 * 
 * Display a spinner and freeze the UI while the data is loading
 * 
 */	
function blockUI() 
{
	$(".container" ).block({ 
		message: '<button class="buttonload"><i class="fa fa-spinner fa-spin"></i>&nbsp;' + blockUIMessage + '</button>',
		overlayCSS: {backgroundColor: '#fff', opacity: 0.6, cursor: 'wait'},
        css: {border: 0, padding: '5px 5px', color: '#fff', width: 'auto', '-webkit-border-radius': 2, '-moz-border-radius': 2, backgroundColor: '#333'}
	});
}

function unblockUI() {
	$( ".container" ).unblock({message: '', css: ''});
}

//The DataTable default language
var dataTableLang = '/localisation/en_EN.json';
/**
 * setDatatableLang
 * 
 * Set the Datatable default language
 * 
 * @param dtLang	The language 
 */
function setDatatableLang(dtLang) 
{
	if (dtLang === "") {
		dtLang = "en_EN.json";
	}
	dataTableLang = '/localisation/' + dtLang;
}

/**
 * loadContainerPage
 * 
 * Call From the menu items, from the left side of the page, menu.jsp
 * 
 * @param url	The rest service to call
 * @param orderColumn The indices of the Column that is sorted 
 * @param orderDirection asc / desc
 * @param freezeUI	Freeze the UI or Not
 * @param groupRow	Group row on a specific column
 * 
 * @returns 
 */
function loadContainerPage(url, orderColumn, orderDirection, freezeUI, groupRow)
{ 		
	$.when( isAuthenticated() ).then
	(		
		function( data, textStatus, jqXHR ) 
		{		
			if (freezeUI == true) {
				blockUI();
			}
	
			var targetVisible = false;
			if (groupRow == false) {
				targetVisible = true;
			}
	
		    $( ".container" ).load(escape(url) + " #containerData", null, function(response, status, xhr) 
			{
				$('table').DataTable(
				{      		
					"language": {"url": dataTableLang},
	             	"rowGroup": {"enable": groupRow, "dataSrc": 0, "className": 'table-group'},
   	             	"order": [ orderColumn, orderDirection ],
	             	"columnDefs": [{ targets: 'no-sort', orderable: false }, {targets: [0], visible: targetVisible}],
 
					initComplete: function () 
				 	{
						// To prevent a "No matching records found" in the fileUploadForm
						if (this.hasClass("filterable")) 
						{
			            	// Apply the search
			            	this.api().columns().every( function () 
							{
			                	var that = this;
			 
		                		$( 'input', this.header() ).on( 'keyup change clear', function () {
		                    		if ( that.search() !== this.value ) {
		                        		that.search( this.value ).draw();
		                    		}
		                 		});
	
			                	$( 'input', this.header() ).on( 'click thead th input', function (event) {
									event.stopPropagation();
			                 	});
		
				                $( 'input', this.footer() ).on( 'keyup change clear', function () {
				                    if ( that.search() !== this.value ) {
				                        that.search( this.value ).draw();
				                    }
				                 });
				            });
						}
			         },	
	         	});   	
		  	});						
		}
	); 
}

/**
 * Propery File Editor
 * 
 * Call From the Websphere menu [WebSphere 8.5.5 Properties]. 
 * Expand the folder of the tree.
 * 
 * All under functions relate to this menu option functionnality
 */
$(document).on('click', '.folder', function (e) 
{		
	// Clean any message
	$("#propertyEditorResultMessage").html('');

	$('.propertyMenu li:has(ul)').addClass('parent_li').find(' > span'); 
    
	var children = $(this).find(' > i'); 
	if (children.hasClass('glyphicon-folder-close')) // folder is empty 
	{ 
		// Fetch the list of files of this directory
		loadViewTree($(this), "/loadPropertiesTree/", $(this).attr('id'));		
       	$(this).attr('title', 'Collapse this branch').find(' > i').addClass('glyphicon-folder-open').removeClass('glyphicon-folder-close');   

    } else {

 		$(this).closest('ul').children('ul').hide('slow');
        $(this).attr('title', 'Expand this branch').find(' > i').addClass('glyphicon-folder-close').removeClass('glyphicon-folder-open');
    }

	$( ".propertyEditor" ).hide('slow');
    e.stopPropagation();
});

/**
 * Propery File Editor
 */
function loadViewTree(target, url, path)
{
	$.when(isAuthenticated()).then
	(		
		function(data, textStatus, jqXHR) 
		{
			// blockUI();
			
			$.post(
			{
				url : url,
				data : jQuery.param({path: path}),
				success : function(data) 
				{					
					$.each(data.subdirs, function(key, value) 
					{
						$(target).closest('ul').append("<ul><li>"
						+ "<span title='Expand this branch' class='folder' "
						+ "id='" + value.path.replace("/\\\\/g", "/") + "' "
						+ "style='text-decoration: none;'><i class='glyphicon glyphicon-folder-close'></i></span> " 
						+ "<a href='javascript:void(0)' onclick=\"displayCurrentSelection('" + value.env + "','"+ value.name + "','" + value.path.replace("/\\\\/g", "/") + "'," + false +")\" style='text-decoration: none;'> " + value.name + "</a>"
						+ "</li></ul>");											
 					})
					
					$.each(data.files, function(key, value) 
					{
						$(target).closest('ul').append("<ul><li><span>"
						+ "<a href='javascript:void(0)' onclick=\"displayCurrentSelection('" + value.env + "','"+ value.name + "','" + value.path.replace("/\\\\/g", "/") + "'," + true + ")\" style='text-decoration: none;'>"
						+ "<i class='glyphicon glyphicon-file'></i> " + value.name + "</a>"
						+ "</span></li></ul>");												
					})						
				},
				error : function(xhr, text, error) {
					$(".container").load("/globalError #containerData", JSON.parse(xhr.responseText));
				}
			});	
			
			// unblockUI();
		}
	);
}

/**
 * Propery File Editor
 */
function displayCurrentSelection(env, name, path, fileSelected)
{ 		
	$.when( isAuthenticated() ).then
	(		
		function( data, textStatus, jqXHR ) 
		{		
			// Clean any message
			$("#propertyEditorResultMessage").html('');
	
			$( ".propertyEditor" ).show('slow');
			
			$( "#propertyEditorLegend" ).html(name + "&nbsp;" );
			if (fileSelected) {			
				$('#propertyEditorFileEnv').html(env);
				$('#propertyEditorFilePath').html(path);
				
				$( "#propertyEditorFolder" ).hide('fast');
				$( "#propertyEditorFile" ).show('fast');
				
			} else {
				$('#propertyEditorFolderEnv').html(env);
				$('#propertyEditorFolderPath').html(path);
	
				$( "#propertyEditorFile" ).hide('fast');
				$( "#propertyEditorFolder" ).show('fast');
			}
		}
	);
}

/**
 * Propery File Editor
 */
function propertyEditorUpload(url, env, path)
{
	$.when( isAuthenticated() ).then
	(		
		function( data, textStatus, jqXHR ) 
		{
			var env = $('#propertyEditorFolderEnv').html();
			var path = $('#propertyEditorFolderPath').html();
	
			$('#env').val(env);
			$('#path').val(path);
			$('#propertyEditorForm').attr('action', url);
	
			var form = $('form')[0]; // You need to use standard javascript object here
			var formData = new FormData(form);
				
			$.ajax(
			{
	            type: "POST",
				enctype: 'multipart/form-data',
				url : url,
				data : formData,
				processData: false,
	            contentType: false,
	            cache: false,
				success : function(data) 
				{
					if (data.errorMessage) {
						$("#propertyEditorResultMessage").html('<div class="error">' + data.errorMessage + '</div>');
					} 
					else if (data.successMessage) 
					{	
						var children = $(document.getElementById(path)).find(' > i');
	 					if (children.hasClass('glyphicon-folder-open')) {
							$( document.getElementById(path) ).click(); //close and open again 
							$( document.getElementById(path) ).click();
						} else {
							$( document.getElementById(path) ).click();	
						}
						
						$("#propertyEditorResultMessage").html('<div>' + data.successMessage + '</div>');
						$("#uploadPropertyEditorFiles").val('');
					}
				},
				error : function(xhr, text, error) { 
					$(".container").load("/globalError #containerData", JSON.parse(xhr.responseText));
				}
			});
		}
	);					
}

/**
 * Propery File Editor
 */
function propertyEditorDownload(url, env, path)
{
	$.when( isAuthenticated() ).then
	(		
		function( data, textStatus, jqXHR ) 
		{
			var env = $('#propertyEditorFolderEnv').html();
			var path = $('#propertyEditorFolderPath').html();
	
			$('#env').val(env);
			$('#path').val(path);
			$('#propertyEditorForm').attr('action', url);
			$('#propertyEditorForm').submit();
		}
	);					
}

/**
 * Propery File Editor
 */
function propertyEditorDeleteAction(url)
{
	$.when( isAuthenticated() ).then
	(		
		function( data, textStatus, jqXHR ) 
		{			
			blockUI();	

			var env = $('#propertyEditorFileEnv').html();
			var path = $('#propertyEditorFilePath').html();
			propertyEditorAction(url, env, path);
			
			unblockUI();	
		}
	);
}

/**
 * Propery File Editor
 */
function propertyEditorBackupAction(url)
{
	$.when( isAuthenticated() ).then
	(		
		function( data, textStatus, jqXHR ) 
		{			
			blockUI();
				
			var env = $('#propertyEditorFileEnv').html();
			var path = $('#propertyEditorFilePath').html();
			propertyEditorAction(url, env, path);
		
			unblockUI();	
		}
	);
}

/**
 * Propery File Editor
 */
function propertyEditorAction(url, env, path)
{
	$('#env').val(env);
	$('#path').val(path);
	$('#propertyEditorForm').attr('action', url);
	
	var formData = $('#propertyEditorForm').serializeArray();	
	$.post(
	{
		url : url,
		data : formData,
		success : function(data) 
		{
			if (data.errorMessage) {
				$("#propertyEditorResultMessage").html('<div class="error">' + data.errorMessage + '</div>');
			} 
			else if (data.successMessage) {				
				$( document.getElementById(path.substr(0, path.lastIndexOf("/")))).click();
				$("#propertyEditorResultMessage").html('<div>' + data.successMessage + '</div>');				
			}
		},
		error : function(xhr, text, error) { 
			$(".container").load("/globalError #containerData", JSON.parse(xhr.responseText));
		}
	});
}

/**
 * Propery File Editor
 */
function propertyEditorTextEdit(formSubmit, url, target, edit, title)
{
	$.when( isAuthenticated() ).then
	(
		function( data, textStatus, jqXHR ) 
		{		
			blockUI();
	
			var env = $('#propertyEditorFileEnv').html();
			var path = $('#propertyEditorFilePath').html();
			$('#env').val(env);
			$('#path').val(path);
					
			if (edit) {
				$('#editMode').show();
				$('#nonEditMode').hide();
			} else {
				$('#editMode').hide();
				$('#nonEditMode').show();			
			}
			loadModal(formSubmit, url, target, edit, $('#propertyEditorLegend').html());
			
			unblockUI();
		}
	);
}
